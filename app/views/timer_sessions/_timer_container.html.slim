.box
  .timer-container
    ruby:
      active_timer_session = timer_session || TimerSession.new
    = labelled_form_for(active_timer_session,
      url: active_timer_session.persisted? ? stop_time_tracker_path : start_time_tracker_path,
      method: :post,
      remote: true,
      format: :js) do |f|
      = f.hidden_field :id, data: { timer_id: '' }
      = error_messages_for active_timer_session
      - if active_timer_session.timer_start
        .text-center.mb-3
          div[data-hours-timer]
            h1
              span#hours-clock.left-text
                | ??:??
      .row
        .issue-container
          .box
            = render 'shared/ticker_issue_list.html.slim', timer_session: active_timer_session,
            data_anker: 'data-issue-deletion-action', container_data_anker: 'data-issue-selection-container'
            hr
            = f.text_field :issue_id, label: false, type: :search,
              required: active_timer_session.persisted?
            - if SettingsManager.visible_hints
              small.form-text.text-muted = t('timer_sessions.messaging.issue_list_hint')
      .mb-3
      .row
        .col-12
          = f.text_field :comments, data: { timer_comment_input: '' },
            placeholder: t('timer_sessions.messaging.comments_placeholder'), class: 'w-100'
          - if SettingsManager.visible_hints
            small.form-text.text-muted = t('timer_sessions.messaging.comments_hint')
      br
      .times-container
        .col
          .w-100
          = f.text_field :timer_start, class: 'datetime-picker w-100', data: { timer_start_input: '' },
            placeholder: t('timer_sessions.timer.date_placeholder'),
            required: active_timer_session.persisted?,
            value: active_timer_session.timer_start&.strftime(t('timer_sessions.formats.datetime_format'))
          - if SettingsManager.visible_hints
            small.form-text.text-muted = t('timer_sessions.messaging.timer_start_hint')
        br
        .col
          = f.text_field :timer_end, class: 'datetime-picker w-100', data: { timer_end_input: '' },
            placeholder: t('timer_sessions.timer.date_placeholder'),
            required: active_timer_session.persisted?,
            value: active_timer_session.timer_end&.strftime(t('timer_sessions.formats.datetime_format'))
          - if SettingsManager.visible_hints
            small.form-text.text-muted = t('timer_sessions.messaging.timer_end_hint')
      - if f.object.persisted?
        = f.text_field :absolute_time, class: 'w-100', data: { timer_absolute_time_input: '' },
          placeholder: t('timer_sessions.timer.absolute_time_placeholder')
        - if SettingsManager.visible_hints
          small.form-text.text-muted = t('timer_sessions.messaging.timer_absolute_time_hint')
      .mb-3
      - if timer_session
        div[data-ending-action-buttons]
          - if @permission_manager.can?(:stop, :time_tracker)
            = f.button :stop, type: :submit, data: { timer_stop_button: '' }, name: :stop do
              =<> t('timer_sessions.timer.stop')
              i.icon.icon-error
          - if @permission_manager.can?(:cancel, :time_tracker)
            = f.button :cancel, type: :submit, data: { timer_cancel_button: '', confirm: l(:text_are_you_sure) }, class: "ml-3", name: :cancel do
              =<> t('timer_sessions.timer.cancel')
              i.icon.icon-cancel
      - elsif !timer_session && @permission_manager.can?(:start, :time_tracker)
        = f.button :start, type: :submit, data: { timer_start_button: '' }, name: :start do
          =<> t('timer_sessions.timer.start')
          i.icon.icon-add.new-issue
